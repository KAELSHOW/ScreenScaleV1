using System;
using System.Drawing;
using System.Windows.Forms;

namespace ScreenLimiter
{
    public partial class Form1 : Form
    {
        private System.Windows.Forms.Timer timer = new System.Windows.Forms.Timer();
        private Rectangle limitArea;
        private IntPtr selectedMonitorHandle;

        public Form1()
        {
            InitializeComponent();
            LoadMonitors();

            timer.Interval = 200; // –ë—ã—Å—Ç—Ä–∞—è —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ —Ä–∞–∑–≤–æ—Ä–æ—Ç –æ–∫–Ω–∞
            timer.Tick += (s, e) => LimitWindows(limitArea);
        }

        private void LoadMonitors()
        {
            comboScreens.Items.Clear();
            foreach (var screen in Screen.AllScreens)
                comboScreens.Items.Add(screen.DeviceName + $" ({screen.Bounds.Width}x{screen.Bounds.Height})");
            if (comboScreens.Items.Count > 0)
                comboScreens.SelectedIndex = 0;
        }

        private void btnSelectArea_Click(object sender, EventArgs e)
        {
            if (comboScreens.SelectedIndex < 0) return;
            var screen = Screen.AllScreens[comboScreens.SelectedIndex];
            selectedMonitorHandle = screen.GetHmonitor();

            OverlayForm overlay = new OverlayForm(screen);
            overlay.ShowDialog();

            limitArea = overlay.GetAbsoluteRectangle();

            txtLeft.Text = limitArea.Left.ToString();
            txtTop.Text = limitArea.Top.ToString();
            txtWidth.Text = limitArea.Width.ToString();
            txtHeight.Text = limitArea.Height.ToString();
        }

        private void btnApply_Click(object sender, EventArgs e)
        {
            if (limitArea == Rectangle.Empty)
            {
                MessageBox.Show("–í—ã–±–µ—Ä–∏—Ç–µ –æ–±–ª–∞—Å—Ç—å —Å–Ω–∞—á–∞–ª–∞!");
                return;
            }
            timer.Start();
            MessageBox.Show("üîí –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –æ–∫–æ–Ω –≤–∫–ª—é—á–µ–Ω–æ!");
        }

        private void btnStop_Click(object sender, EventArgs e)
        {
            timer.Stop();
            MessageBox.Show("‚õî –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –æ–∫–æ–Ω –æ—Ç–∫–ª—é—á–µ–Ω–æ!");
        }

        private void btnGetResolution_Click(object sender, EventArgs e)
        {
            if (comboScreens.SelectedIndex < 0) return;
            var screen = Screen.AllScreens[comboScreens.SelectedIndex];
            txtLeft.Text = screen.Bounds.Left.ToString();
            txtTop.Text = screen.Bounds.Top.ToString();
            txtWidth.Text = screen.Bounds.Width.ToString();
            txtHeight.Text = screen.Bounds.Height.ToString();
        }

        private void LimitWindows(Rectangle limit)
        {
            NativeMethods.EnumWindows((hWnd, lParam) =>
            {
                if (!NativeMethods.IsWindowVisible(hWnd)) return true;

                IntPtr windowMonitor = NativeMethods.MonitorFromWindow(hWnd, NativeMethods.MONITOR_DEFAULTTONEAREST);
                if (windowMonitor != selectedMonitorHandle) return true; // –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–∫–Ω–∞ –Ω–∞ –¥—Ä—É–≥–∏—Ö –º–æ–Ω–∏—Ç–æ—Ä–∞—Ö

                // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–æ–¥–≥–æ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –ø–æ–¥ –≤—ã–±—Ä–∞–Ω–Ω—É—é –æ–±–ª–∞—Å—Ç—å
                NativeMethods.SetWindowPos(hWnd, IntPtr.Zero, limit.Left, limit.Top, limit.Width, limit.Height,
                    NativeMethods.SWP_NOZORDER | NativeMethods.SWP_NOACTIVATE);

                return true;
            }, IntPtr.Zero);
        }
    }
}
